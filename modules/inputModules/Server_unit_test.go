package inputModules

import (
	"encoding/json"
	"errors"
	"github.com/stretchr/testify/assert"
	"goshort/kernel"
	"goshort/modules/dbModules"
	"goshort/modules/inputModules/Server/endpoints/urlHandlers"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

var NotImplementedError = errors.New("Not implemented")

func getDefaultFunc(key string) (kernel.Url, error) {
	return kernel.Url{}, NotImplementedError
}

func postDefaultFunc(newUrl kernel.Url) (kernel.Url, error) {
	return kernel.Url{}, NotImplementedError
}

func patchDefaultFunc(patchUrl kernel.Url) error {
	return NotImplementedError
}

func deleteDefaultFunc(url_ kernel.Url) error {
	return NotImplementedError
}

func genericKeySupportDefaultFunc() bool {
	return false
}

//func executeRequest(server Server, url string) *httptest.ResponseRecorder {
//	req := httptest.NewRequest(http.MethodGet, url, nil)
//	rec := httptest.NewRecorder()
//
//	c := server.echo.NewContext(req, rec)
//	c.setPath(url)
//	return rec
//
//	app.Router.ServeHTTP(rr, req)
//	return rr
//}

//func Test(t *testing.T) { TestingT(t) }
//
//type MySuite struct {
//
//	server Server
//}
//
//var _ = Suite(&MySuite{})

//func (s *MySuite) SetUpSuite(c *C) {
//port := viper.GetString("port")
//s.server = Create("", port)
//Kernel.Object = Kernel.Kernel{}
//
//options := bigcache.DefaultOptions
//bigCacheStore, err := bigcache.NewStore(options)
//c.Assert(err, nil)
//
//database := aaa.Create(bigCacheStore)
//
//Kernel.Object.Initialize(&s.server, &database)
//}

//func (s *MySuite) SetAndGetGeneric(c *C, jsonStr []byte, expectedURL *Kernel.Url) {
//	req := httptest.NewRequest(http.MethodPost, "api/urls/", nil)
//	rec := httptest.NewRecorder()
//
//	context := s.server.echo.NewContext(req, rec)
//	context.SetPath("/api/urls/")
//
//
//	if assert.NoError(c, urlHandlers.UrlsGetHandler(context)) {
//		assert.Equal(c, http.StatusOK, rec.Code)
//		//assert.Equal(c, userJSON, rec.Body.String())
//	}
//
//	//app.Router.ServeHTTP(rr, req)
//	//return rr
//}

//func (s *MySuite) SetAndGetGeneric(c *C, jsonStr []byte, expectedURL *Kernel.Url) {
//	req, err := http.NewRequest("POST", "/urls/", bytes.NewBuffer(jsonStr))
//	c.Check(err, Equals, nil)
//	req.Header.Set("Content-Type", "application/json")
//	req.Header.Set("Authorization", "Bearer demo")
//
//	response := executeRequest(Kernel.AppObject, req)
//	c.Check(response.Code, Equals, 200)
//	var url Kernel.Url
//	dec := json.NewDecoder(response.Body)
//	dec.DisallowUnknownFields()
//	err = dec.Decode(&url)
//	c.Check(err, Equals, nil)
//
//	if expectedURL.Key != "" {
//		c.Check(url.Key, Equals, expectedURL.Key)
//	} else {
//		expectedURL.Key = url.Key
//	}
//	c.Check(url.Url, Equals, expectedURL.Url)
//	c.Check(url.Code, Equals, expectedURL.Code)
//	c.Check(url.Autogenerated, Equals, expectedURL.Autogenerated)
//
//	req, _ = http.NewRequest("GET", "/"+expectedURL.Key, bytes.NewBuffer([]byte{}))
//	response = executeRequest(Kernel.AppObject, req)
//	c.Check(response.Code, Equals, expectedURL.Code)
//	c.Check(response.Header().Get("Location"), Equals, expectedURL.Url)
//}

//func TestSmth(t *testing.T) {
//
//}

func TestSimplePost(t *testing.T) {
	//s.SetAndGetGeneric(
	//	c,
	//	[]byte(`{
	//		"key": "yandex",
	//		"url": "https://yandex.ru"
	//	}`),
	//	&Kernel.Url{
	//		Key:           "yandex",
	//		Url:           "https://yandex.ru",
	//		Code:          301,
	//		Autogenerated: false,
	//	})
	server := Create("", "80")
	kernel.Object = kernel.Kernel{}

	postFunc := func(newUrl kernel.Url) (kernel.Url, error) {
		assert.Equal(t, kernel.Url{Key: "aaa", Url: "https://yandex.ru", Code: 301, Autogenerated: false}, newUrl)
		return newUrl, nil
	}

	db := dbModules.Create(getDefaultFunc, postFunc, patchDefaultFunc, deleteDefaultFunc,
		genericKeySupportDefaultFunc)

	kernel.Object.Initialize(&server, &db)

	req := httptest.NewRequest(http.MethodPost, "/api/urls/",
		strings.NewReader(`{"url":"https://yandex.ru","key":"aaa"}`))
	rec := httptest.NewRecorder()

	context := server.echo.NewContext(req, rec)
	context.SetPath("/api/urls/")
	err := urlHandlers.UrlsPostHandler(context)
	assert.NoError(t, err)
	var resUrl kernel.Url
	_ = json.NewDecoder(rec.Body).Decode(&resUrl)
	assert.Equal(t, http.StatusOK, rec.Code)
	assert.Equal(t, kernel.Url{Key: "aaa", Url: "https://yandex.ru", Code: 301, Autogenerated: false}, resUrl)
}

//func (s *MySuite) TestGenericPost(c *C) {
//	s.SetAndGetGeneric(
//		c,
//		[]byte(`{"url": "https://yandex.ru"}`),
//		&Kernel.Url{
//			Key:           "",
//			Url:           "https://yandex.ru",
//			Code:          301,
//			Autogenerated: true,
//		})
//}
//
//func (s *MySuite) TestNotDuplicatingGenericUrl(c *C) {
//	url := Kernel.Url{
//		Key:           "",
//		Url:           "https://fjhdsjkhk.ru",
//		Code:          301,
//		Autogenerated: true,
//	}
//	s.SetAndGetGeneric(c, []byte(`{"url": "https://fjhdsjkhk.ru"}`), &url)
//	s.SetAndGetGeneric(c, []byte(`{"url": "https://fjhdsjkhk.ru"}`), &url)
//}
//
//func (s *MySuite) TestBadToken(c *C) {
//	req, err := http.NewRequest("POST", "/urls/", bytes.NewBuffer([]byte("")))
//	c.Check(err, Equals, nil)
//	req.Header.Set("Content-Type", "application/json")
//	req.Header.Set("Authorization", "Bearer ddd")
//
//	response := executeRequest(Kernel.AppObject, req)
//	c.Check(response.Code, Equals, 401)
//}
//
