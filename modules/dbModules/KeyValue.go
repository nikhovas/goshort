package dbModules

import (
	"errors"
	"goshort/kernel"
	"goshort/types"
	kernelErrors "goshort/types/errors"
	"time"
)

type KeyValueKernel interface {
	Init(config map[string]interface{}) error
	Run() error
	GetUrl(key string) (types.Url, error)
	SetUrlIfNotExists(key string, url types.Url) error
	SetUrl(key string, url types.Url) error
	SetReversed(url string, key string) error
	PatchAutogenerated(url types.Url) error
	DeleteUrl(url types.Url) error
	DeleteAutogenerated(url types.Url) error
	Save() error
	GetPotentialKey(key string) (string, error)
	GetNewUniqueKey() (string, error)
}

type KeyValue struct {
	KeyValueKernel KeyValueKernel
	Name           string
	Kernel         *kernel.Kernel
}

func (controller *KeyValue) Init(config map[string]interface{}) error {
	controller.Name = config["name"].(string)
	return controller.KeyValueKernel.Init(config)
}

func (controller *KeyValue) Run() error {
	return controller.KeyValueKernel.Run()
}

func (controller *KeyValue) Get(key string) (types.Url, error) {
	return controller.KeyValueKernel.GetUrl(key)
}

func (controller *KeyValue) Post(newUrl types.Url) (types.Url, error) {
	var p string
	if newUrl.Autogenerated {
		added := false
		for !added {
			potentialKey, err := controller.KeyValueKernel.GetPotentialKey(newUrl.Url)
			if err != nil && !errors.Is(err, kernelErrors.KeyNotFoundError) {
				return types.Url{}, err
			}

			if err == nil { // key is found
				potentialUrl, err := controller.Get(potentialKey)
				if err != nil && !errors.Is(err, kernelErrors.KeyNotFoundError) {
					return types.Url{}, err
				}
				if potentialUrl.Url == newUrl.Url {
					newUrl = potentialUrl
					added = true
				}
			} else { // key is free
				newUrl.Key, err = controller.KeyValueKernel.GetNewUniqueKey()

				err = controller.KeyValueKernel.SetUrlIfNotExists(newUrl.Key, newUrl)
				// todo inspect
				if errors.Is(err, kernelErrors.ValueAlreadyExistsError) {
					added = false
				} else if err != nil {
					return types.Url{}, err
				} else {
					added = true
				}

				err = controller.KeyValueKernel.SetReversed(newUrl.Url, newUrl.Key)
				if err != nil {
					return types.Url{}, nil
				}
			}
			time.Sleep(time.Second)
		}
	} else {
		err := controller.KeyValueKernel.SetUrlIfNotExists(newUrl.Key, newUrl)
		if err != nil {
			return types.Url{}, err
		}
	}

	return newUrl, controller.KeyValueKernel.Save()
}

func (controller *KeyValue) Patch(patchUrl types.Url) error {
	var err error
	if patchUrl.Autogenerated {
		err = controller.KeyValueKernel.PatchAutogenerated(patchUrl)
	} else {
		err = controller.KeyValueKernel.SetUrl(patchUrl.Key, patchUrl)
	}

	if err != nil {
		return err
	}

	return controller.KeyValueKernel.Save()
}

func (controller *KeyValue) Delete(url_ types.Url) error {
	var err error
	if url_.Autogenerated {
		err = controller.KeyValueKernel.DeleteAutogenerated(url_)
	} else {
		err = controller.KeyValueKernel.DeleteUrl(url_)
	}

	if err != nil {
		return err
	}

	return controller.KeyValueKernel.Save()
}

func (controller *KeyValue) GenericKeySupport() bool {
	return true
}

func (controller *KeyValue) GetName() string {
	return controller.Name
}

func (controller *KeyValue) GetType() string {
	return "Redis"
}
