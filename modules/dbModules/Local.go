package dbModules

//
//import (
//	"errors"
//	"github.com/mediocregopher/radix/v3"
//	"goshort/kernel"
//	"goshort/kernel/utils"
//	"goshort/types"
//	kernelErrors "goshort/types/errors"
//	"sync"
//	"sync/atomic"
//	"time"
//	"github.com/syndtr/goleveldb/leveldb"
//)
//
//type Local struct {
//	Kernel   *kernel.Kernel
//	Name     string
//	Filename string
//	database *leveldb.DB
//
//}
//
//func (controller *Local) Init(config map[string]interface{}) error {
//	controller.Filename = config["filename"].(string)
//	controller.Name = config["name"].(string)
//	return nil
//}
//
//func (controller *Local) Run() error {
//	var err error
//	controller.database, err = leveldb.OpenFile(controller.Filename, nil)
//	return err
//}
//
//func (controller *Local) Get(key string) (types.Url, error) {
//	var preUrlBytes []byte
//	var err error
//	if preUrlBytes, err = controller.database.Get([]byte("url "+key), nil); err != nil {
//		return types.Url{}, err
//	}
//	preUrl := string(preUrlBytes)
//	if preUrl == "" {
//		return types.Url{}, kernelErrors.UrlNotFoundError
//	}
//
//	urlData, err := types.FromString(preUrl)
//	if err != nil {
//		return types.Url{}, nil
//	}
//	urlData.Key = key
//
//	return urlData, nil
//}
//
//func (controller *Local) Post(newUrl types.Url) (types.Url, error) {
//	var p string
//	if newUrl.Autogenerated {
//		added := false
//		for !added {
//			potentialKey, err := controller.GetPotentialKey(newUrl.Url)
//			if err != nil && !errors.Is(err, kernelErrors.KeyNotFoundError) {
//				return types.Url{}, err
//			}
//
//			if err == nil { // key is found
//				potentialUrl, err := controller.Get(potentialKey)
//				if err != nil && !errors.Is(err, kernelErrors.KeyNotFoundError) {
//					return types.Url{}, err
//				}
//				if potentialUrl.Url == newUrl.Url {
//					newUrl = potentialUrl
//					added = true
//				}
//			} else { // key is free
//				newUrl.Key, err = controller.GetNewUniqueKey()
//
//				err = controller.pool.Do(radix.Cmd(&p, "SET", "url "+newUrl.Key, newUrl.ToString(), "NX"))
//				// todo inspect
//				if errors.Is(err, kernelErrors.ValueAlreadyExistsError) {
//					added = false
//				} else if err != nil {
//					return types.Url{}, err
//				} else {
//					added = true
//				}
//
//				err = controller.pool.Do(radix.Cmd(nil, "SET", "autogen "+newUrl.Url, newUrl.Key))
//				if err != nil {
//					return types.Url{}, nil
//				}
//			}
//			time.Sleep(time.Second)
//		}
//	} else {
//		err := controller.pool.Do(radix.Cmd(&p, "SET", "url "+newUrl.Key, newUrl.ToString(), "NX"))
//		if err != nil {
//			return types.Url{}, err
//		}
//	}
//
//	return newUrl, controller.pool.Do(radix.Cmd(nil, "SAVE"))
//}
//
//func (controller *Local) Patch(patchUrl types.Url) error {
//	if patchUrl.Autogenerated {
//		controller.mutex.Lock()
//		defer controller.mutex.Unlock()
//
//		controller.dataStorage.Store(patchUrl.Key, patchUrl)
//		controller.inverseStorage.Store(patchUrl.Url, patchUrl.Key)
//	} else {
//		controller.mutex.RLock()
//		controller.mutex.RUnlock()
//
//		controller.dataStorage.Store(patchUrl.Key, patchUrl)
//	}
//
//	return nil
//}
//
//func (controller *Local) Delete(url_ types.Url) error {
//	if url_.Autogenerated {
//		controller.mutex.Lock()
//		defer controller.mutex.Unlock()
//
//		controller.dataStorage.Delete(url_.Key)
//		controller.inverseStorage.Delete(url_.Url)
//	} else {
//		controller.mutex.RLock()
//		controller.mutex.RUnlock()
//
//		controller.dataStorage.Delete(url_.Key)
//	}
//
//	return nil
//}
//
//func (controller *Local) GenericKeySupport() bool {
//	return true
//}
//
//func (controller *Local) GetPotentialKey(key string) (string, error) {
//	var preUrl string
//	err := controller.pool.Do(radix.Cmd(&preUrl, "GET", "url "+key))
//	if err != nil {
//		return "", err
//	} else if preUrl == "" {
//		return "", kernelErrors.KeyNotFoundError
//	}
//
//	return preUrl, nil
//}
//
//func (controller *Local) GetNewUniqueKey() (string, error) {
//	var counter int
//	err := controller.pool.Do(radix.Cmd(&counter, "INCR", "counter"))
//	return utils.NumberToLexString(counter), err
//}
//
//func (controller *Local) GenericKeySupport() bool {
//	return true
//}
//
//
//
//
//func (controller *Local) GetName() string {
//	return controller.Name
//}
//
//func (controller *Local) GetType() string {
//	return "Local"
//}
