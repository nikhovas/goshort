package kernel

import (
	"goshort/types"
	"goshort/types/errors"
)

type Kernel struct {
	InputControllers    []types.InputControllerInterface
	UrlController       types.UrlControllerInterface
	Loggers             []types.LoggerInterface
	Middlewares         []types.MiddlewareInterface
	ExtraordinaryLogger types.LoggerInterface
	DefaultRedirectCode int
}

type MiddlewareFunc func(url *types.Url) error

func (a *Kernel) Get(key string) (types.Url, error) {
	return a.UrlController.Get(key)
}

func (a *Kernel) Post(newUrl types.Url) (types.Url, error) {
	if newUrl.Code == 0 {
		newUrl.Code = 301
	}
	if newUrl.Key == "" {
		newUrl.Autogenerated = true
	}

	newUrl, err := a.applyMiddlewares(newUrl)
	if err != nil {
		return newUrl, err
	}

	if newUrl.Autogenerated && !a.UrlController.GenericKeySupport() {
		return newUrl, errors.GenericKeysAreNotSupported
	}

	return a.UrlController.Post(newUrl)
}

func (a *Kernel) Patch(patchUrl types.Url) error {
	return a.UrlController.Patch(patchUrl)
}

func (a *Kernel) Delete(url_ types.Url) error {
	return a.UrlController.Delete(url_)
}

func (a *Kernel) Run() error {
	if err := a.UrlController.Run(); err != nil {
		return err
	}

	for _, v := range a.InputControllers {
		if err := v.Run(); err != nil {
			return err
		}
	}

	return nil
}

func (a *Kernel) Log(element interface{}) {
	for _, logger := range a.Loggers {
		log, ok := element.(types.Log)
		if ok {
			logger.Send(log)
		}
		err, ok := element.(error)
		if ok {
			logger.Send(&errors.SimpleErrorWrapper{Err: err})
		}
	}
}

func (a *Kernel) applyMiddlewares(url types.Url) (types.Url, error) {
	for _, m := range a.Middlewares {
		err := m.Exec(&url)
		if err != nil {
			if m.BreakOnError() {
				return url, err
			} else {
				a.Log(err)
				_ = a.LogError(err)
			}
		}
	}
	return url, nil
}

func (a *Kernel) LogError(err error) error {
	e, ok := err.(types.AdvancedError)
	if ok {
		return e
	} else {
		return err
	}
}

func (a *Kernel) LogErrorForward(params ...interface{}) interface{} {
	paramsLength := len(params)
	err, ok := params[paramsLength-1].(error)
	if !ok {
		return params
	}

	_ = a.LogError(err)
	return params
}
