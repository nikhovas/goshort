package kernel

import "goshort/kernel/errors"

type Kernel struct {
	InputControllers    []InputControllerInterface
	UrlController       UrlControllerInterface
	Loggers             []LoggerInterface
	Middlewares         []MiddlewareInterface
	ExtraordinaryLogger LoggerInterface
}

type MiddlewareFunc func(url *Url) error

var Object = Kernel{}

func (a *Kernel) Get(key string) (Url, error) {
	return a.UrlController.Get(key)
}

func (a *Kernel) Post(newUrl Url) (Url, error) {
	newUrl, err := a.applyMiddlewares(newUrl)
	if err != nil {
		return newUrl, err
	}

	if newUrl.Autogenerated && !a.UrlController.GenericKeySupport() {
		return newUrl, errors.GenericKeysAreNotSupported
	}

	return a.UrlController.Post(newUrl)
}

func (a *Kernel) Patch(patchUrl Url) error {
	return a.UrlController.Patch(patchUrl)
}

func (a *Kernel) Delete(url_ Url) error {
	return a.UrlController.Delete(url_)
}

func (a *Kernel) Run() error {
	if err := a.UrlController.Run(); err != nil {
		return err
	}

	for _, v := range a.InputControllers {
		if err := v.Run(); err != nil {
			return err
		}
	}

	return nil
}

func (a *Kernel) Log(element interface{}) {
	for _, logger := range a.Loggers {
		log, ok := element.(Log)
		if ok {
			logger.Send(log)
		}
		err, ok := element.(error)
		if ok {
			logger.Send(&errors.SimpleErrorWrapper{Err: err})
		}
	}
}

func (a *Kernel) applyMiddlewares(url Url) (Url, error) {
	for _, m := range a.Middlewares {
		err := m.Exec(&url)
		if err != nil {
			if m.BreakOnError() {
				return url, err
			} else {
				a.Log(err)
				_ = a.LogError(err)
			}
		}
	}
	return url, nil
}

func (a *Kernel) LogError(err error) error {
	e, ok := err.(AdvancedError)
	if ok {
		return e
	} else {
		return err
	}
}

//func (a *Kernel) ModuleErrorForward(module ModuleInterface, err error) errors.ModuleErrorInterface {
//	return errors.GenerateModuleError(module, err)
//}

func (a *Kernel) LogErrorForward(params ...interface{}) interface{} {
	paramsLength := len(params)
	err, ok := params[paramsLength-1].(error)
	if !ok {
		return params
	}

	_ = a.LogError(err)
	return params
}
