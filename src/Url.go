package src

import (
	"encoding/json"
	"github.com/mediocregopher/radix/v3"
	"net/http"
	"strconv"
	"strings"
)

type Url struct {
	Key           string `json:"key"`
	Url           string `json:"url"`
	Code          int    `json:"code"`
	Autogenerated bool   `json:"autogenerated"`
}

func UrlFromRedis(pool2 *radix.Pool, key string) (Url, error) {
	var preUrl string
	err := pool2.Do(radix.Cmd(&preUrl, "GET", key))
	if err != nil {
		return Url{}, err
	}

	if len(preUrl) == 0 {
		return Url{}, err
	}

	s := strings.Split(preUrl, "~")
	code, _ := strconv.Atoi(s[0])

	urlStruct := Url{
		key,
		strings.Join(s[2:], "~"),
		code,
		s[1] == "1",
	}
	return urlStruct, nil
}

func UrlToRedis(pool2 *radix.Pool, url Url) error {

	if url.Autogenerated {
		p := radix.Pipeline(
			radix.Cmd(nil, "SET", url.Key, strconv.Itoa(url.Code)+"~1~"+url.Url),
			radix.Cmd(nil, "SET", "$autogen$"+url.Url, url.Key),
		)

		if err := pool2.Do(p); err != nil {
			panic(err)
		}
	} else {
		err := pool2.Do(
			radix.Cmd(nil, "SET", url.Key, strconv.Itoa(url.Code)+"~0~"+url.Url))
		if err != nil {
			return err
		}
	}

	return nil
}

func UrlToRedisInitial(pool2 *radix.Pool, url Url) (bool, error) {
	var p string
	if url.Autogenerated {
		if err := pool2.Do(radix.Cmd(&p, "SET", url.Key, strconv.Itoa(url.Code)+"~1~"+url.Url, "NX")); err != nil {
			panic(err)
		}

		if p != "OK" {
			return false, nil
		}

		if err := pool2.Do(radix.Cmd(nil, "SET", "$autogen$"+url.Url, url.Key)); err != nil {
			panic(err)
		}

		return true, nil
	} else {
		err := pool2.Do(radix.Cmd(&p, "SET", url.Key, strconv.Itoa(url.Code)+"~0~"+url.Url, "NX"))
		if err != nil {
			return false, err
		}
	}
	return p == "OK", nil
}

func UrlToHttpResponse(url Url, w http.ResponseWriter) {
	js, err := json.Marshal(url)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	_, _ = w.Write(js)
}

func UrlFromHttpRequest(w http.ResponseWriter, r *http.Request) (Url, error) {
	var url Url
	err := decodeJSONBody(w, r, &url)
	return url, err
}

func TryAutogenUrlFromRedis(pool2 *radix.Pool, url string) (string, error) {
	var key string
	if err := pool2.Do(radix.Cmd(&key, "GET", "$autogen$"+url)); err != nil {
		return "", err
	}

	return key, nil
}
