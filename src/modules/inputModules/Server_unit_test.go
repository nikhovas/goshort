package inputModules

import (
	"encoding/json"
	"errors"
	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
	"goshort/src/kernel"
	"goshort/src/modules/dbModules"
	"goshort/src/types"
	kernelErrors "goshort/src/types/errors"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

var NotImplementedError = errors.New("not implemented")

func genericKeySupportFalseFunc() bool {
	return false
}

func genericKeySupportTrueFunc() bool {
	return true
}

func createEnvironment(serverToken string) (*dbModules.Generic, *Server) {
	server := &Server{}
	db := &dbModules.Generic{
		GetFunc:               func(_ string) (types.Url, error) { return types.Url{}, NotImplementedError },
		PostFunc:              func(_ types.Url) (types.Url, error) { return types.Url{}, NotImplementedError },
		PatchFunc:             func(_ types.Url) error { return NotImplementedError },
		DeleteFunc:            func(_ string) error { return NotImplementedError },
		GenericKeySupportFunc: genericKeySupportFalseFunc,
		Name:                  "Generic",
	}
	kernelInstance := &kernel.Kernel{}
	kernelInstance.Logger = &kernel.LoggingKernel{Kernel: kernelInstance}
	kernelInstance.Database = &kernel.DatabaseKernel{Kernel: kernelInstance, Database: db}
	kernelInstance.Input = &kernel.InputKernel{Kernel: kernelInstance, Inputs: []types.InputInterface{server}}
	kernelInstance.Middleware = &kernel.MiddlewareKernel{Kernel: kernelInstance}
	kernelInstance.Reconnection = kernel.ReconnectionKernel{Kernel: kernelInstance}
	kernelInstance.Signal = kernel.SignalKernel{Kernel: kernelInstance}

	server.Kernel = kernelInstance
	if serverToken == "" {
		_ = server.Init(map[string]interface{}{"name": "", "ip": "", "port": 0})
	} else {
		_ = server.Init(map[string]interface{}{"name": "", "ip": "", "port": 0, "token": serverToken})
	}

	return db, server
}

func getTestHelper(t *testing.T, serverToken string, getFunc func(key string) (types.Url, error), key string,
	comparingUrl types.Url, comparingReturnCode int, headers map[string]string) {
	db, server := createEnvironment(serverToken)
	db.GetFunc = getFunc

	req := httptest.NewRequest(http.MethodGet, "/api/urls/"+key+"/", strings.NewReader(""))
	for key, value := range headers {
		req.Header.Set(key, value)
	}
	rec := httptest.NewRecorder()

	server.echo.ServeHTTP(rec, req)
	var resUrl types.Url
	_ = json.NewDecoder(rec.Body).Decode(&resUrl)
	assert.Equal(t, comparingReturnCode, rec.Code)
	assert.Equal(t, comparingUrl, resUrl)
}

func TestSimpleGet(t *testing.T) {
	url := types.Url{Key: "testKey", Url: "http://example.com", Code: 301, Autogenerated: false}
	getFunc := func(key string) (types.Url, error) {
		assert.Equal(t, "testKey", key)
		return url, nil
	}
	getTestHelper(t, "", getFunc, "testKey", url, http.StatusOK, map[string]string{})
}

func TestGetNoExisting(t *testing.T) {
	var url types.Url
	getFunc := func(key string) (types.Url, error) {
		return types.Url{}, kernelErrors.NotFoundError
	}
	getTestHelper(t, "", getFunc, "", url, http.StatusNotFound, map[string]string{})
}

func postTestHelper(t *testing.T, serverToken string, postFunc func(newUrl types.Url) (types.Url, error),
	genericKeySupport func() bool, inputString string, comparingUrl types.Url, comparingReturnCode int,
	headers map[string]string) {
	db, server := createEnvironment(serverToken)
	db.PostFunc = postFunc
	db.GenericKeySupportFunc = genericKeySupport

	req := httptest.NewRequest(http.MethodPost, "/api/urls/", strings.NewReader(inputString))
	req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
	for key, value := range headers {
		req.Header.Set(key, value)
	}
	rec := httptest.NewRecorder()

	server.echo.ServeHTTP(rec, req)
	var resUrl types.Url
	_ = json.NewDecoder(rec.Body).Decode(&resUrl)
	assert.Equal(t, comparingReturnCode, rec.Code)
	assert.Equal(t, comparingUrl, resUrl)
}

func TestSimplePost(t *testing.T) {
	postTestHelper(
		t, "",
		func(newUrl types.Url) (types.Url, error) {
			assert.Equal(t, types.Url{Key: "aaa", Url: "https://yandex.ru", Code: 301, Autogenerated: false}, newUrl)
			return newUrl, nil
		},
		genericKeySupportFalseFunc,
		`{"url":"https://yandex.ru","key":"aaa"}`,
		types.Url{Key: "aaa", Url: "https://yandex.ru", Code: 301, Autogenerated: false},
		http.StatusCreated,
		map[string]string{})
}

func TestGenericPost(t *testing.T) {
	postTestHelper(
		t, "",
		func(newUrl types.Url) (types.Url, error) {
			assert.Equal(t, types.Url{Key: "", Url: "https://yandex.ru", Code: 301, Autogenerated: true}, newUrl)
			newUrl.Key = "a"
			return newUrl, nil
		},
		genericKeySupportTrueFunc,
		`{"url":"https://yandex.ru"}`,
		types.Url{Key: "a", Url: "https://yandex.ru", Code: 301, Autogenerated: true},
		http.StatusCreated,
		map[string]string{})
}

func TestAlreadyExistsPost(t *testing.T) {
	postTestHelper(
		t, "",
		func(newUrl types.Url) (types.Url, error) {
			return types.Url{}, kernelErrors.AlreadyExistsError
		},
		genericKeySupportTrueFunc,
		"{}",
		types.Url{},
		http.StatusConflict,
		map[string]string{})
}

func TestGetWithAuth(t *testing.T) {
	url := types.Url{Key: "testKey", Url: "http://example.com", Code: 301, Autogenerated: false}
	getFunc := func(key string) (types.Url, error) {
		assert.Equal(t, "testKey", key)
		return url, nil
	}
	getTestHelper(t, "asdf", getFunc, "testKey", url, http.StatusOK,
		map[string]string{"Authorization": "Bearer asdf"})
}

func TestGetBadAuth(t *testing.T) {
	getTestHelper(
		t, "asdf",
		func(key string) (types.Url, error) {
			assert.Equal(t, true, false)
			return types.Url{}, nil
		}, "testKey", types.Url{}, http.StatusUnauthorized,
		map[string]string{"Authorization": "Bearer notCorrect"})
}
