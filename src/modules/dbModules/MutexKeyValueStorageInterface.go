package dbModules

import (
	"errors"
	"goshort/src/kernel"
	"goshort/src/types"
	kernelErrors "goshort/src/types/errors"
)

type MutexKeyValueStorageInterface interface {
	Init(config map[string]interface{}) error
	Run() error
	RLock()
	RUnlock()
	Lock()
	Unlock()
	ForwardGet(key string) (types.Url, error)
	ForwardPost(key string, newUrl types.Url) (types.Url, error)
	ForwardDelete(key string) error
	BackwardGet(key string) (string, error)
	BackwardPost(url string, key string) (string, error)
	BackwardDelete(url string) error
	GetNewUniqueKey() string
	GetType() string
}

type MutexKeyValueStorageModule struct {
	Kernel  *kernel.Kernel
	Name    string
	Storage MutexKeyValueStorageInterface
}

func (controller *MutexKeyValueStorageModule) Init(config map[string]interface{}) error {
	controller.Name = config["name"].(string)
	return controller.Storage.Init(config)
}

func (controller *MutexKeyValueStorageModule) Run() error {
	return controller.Storage.Run()
}

func (controller *MutexKeyValueStorageModule) Get(key string) (types.Url, error) {
	controller.Storage.RLock()
	defer controller.Storage.RUnlock()
	return controller.Storage.ForwardGet(key)
}

func (controller *MutexKeyValueStorageModule) Post(newUrl types.Url) (types.Url, error) {
	controller.Storage.Lock()
	defer controller.Storage.Unlock()

	if newUrl.Autogenerated {
		potentialKey, err := controller.Storage.BackwardGet(newUrl.Url)
		if err != nil {
			if errors.Is(err, kernelErrors.NotFoundError) {
				newUrl.Key = controller.Storage.GetNewUniqueKey()
				url, err := controller.Storage.ForwardPost(newUrl.Key, newUrl)
				if err != nil {
					return types.Url{}, err
				}

				url.Url, err = controller.Storage.BackwardPost(newUrl.Url, newUrl.Key)
				return url, err
			} else {
				return types.Url{}, err
			}
		}

		var potentialUrl types.Url
		potentialUrl, err = controller.Storage.ForwardGet(potentialKey)
		if err == kernelErrors.NotFoundError {
			// TODO: add logging to this
			return controller.Storage.ForwardPost(newUrl.Key, newUrl)
		} else if err != nil {
			return types.Url{}, err
		}

		return potentialUrl, nil
	} else {
		return controller.Storage.ForwardPost(newUrl.Key, newUrl)
	}
}

func (controller *MutexKeyValueStorageModule) Patch(patchUrl types.Url) error {
	controller.Storage.Lock()
	defer controller.Storage.Unlock()

	if patchUrl.Autogenerated {
		_, err := controller.Storage.ForwardPost(patchUrl.Key, patchUrl)
		if err != nil {
			return err
		}

		_, err = controller.Storage.BackwardPost(patchUrl.Url, patchUrl.Key)
		if err != nil {
			return err
		}

		return nil
	} else {
		_, err := controller.Storage.ForwardPost(patchUrl.Key, patchUrl)
		return err
	}
}

func (controller *MutexKeyValueStorageModule) Delete(url_ types.Url) error {
	controller.Storage.Lock()
	defer controller.Storage.Unlock()

	if url_.Autogenerated {
		err := controller.Storage.ForwardDelete(url_.Key)
		if err != nil {
			return err
		}
		return controller.Storage.BackwardDelete(url_.Url)
	} else {
		return controller.Storage.ForwardDelete(url_.Key)
	}
}

func (controller *MutexKeyValueStorageModule) GenericKeySupport() bool {
	return true
}

func (controller *MutexKeyValueStorageModule) GetName() string {
	return controller.Name
}

func (controller *MutexKeyValueStorageModule) GetType() string {
	return controller.Storage.GetType()
}
