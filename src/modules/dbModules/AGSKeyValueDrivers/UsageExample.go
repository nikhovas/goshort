package AGSKeyValueDrivers

import (
	"bytes"
	"encoding/json"
	"errors"
	"github.com/mediocregopher/radix/v3"
	"goshort/src/kernel"
	"goshort/src/kernel/utils"
	"goshort/src/types"
	kernelErrors "goshort/src/types/errors"
	"strings"
	"sync"
	"time"
)

type UsageExample struct {
	redis Redis
	types.ModuleBase
	pool     *radix.Pool
	ip       string
	poolSize int
	name     string
	Kernel   *kernel.Kernel
}

func CreateUsageExample(kernel *kernel.Kernel) types.DatabaseInterface {
	return &UsageExample{Kernel: kernel}
}

func (controller *UsageExample) Init(config map[string]interface{}) error {
	if err := controller.ModuleBase.Init(config); err != nil {
		return err
	}
	controller.pool = nil
	controller.ip = config["ip"].(string)
	controller.poolSize = config["pool_size"].(int)
	return nil
}

func (controller *UsageExample) Connect() error {
	var err error
	controller.pool, err = radix.NewPool("tcp", controller.ip, controller.poolSize)
	return err
}

func (controller *UsageExample) Run(wg *sync.WaitGroup) error {
	wg.Done()
	err := controller.Connect()
	if err != nil {
		return err
	}
	controller.Kernel.SetModuleRunState(controller)
	return nil
}

func (controller *UsageExample) Stop() error {
	if controller.pool != nil {
		controller.Kernel.SetModuleStopState(controller)
		return controller.pool.Close()
	}
	return nil
}

func (controller *UsageExample) TryReconnect() error {
	return controller.Connect()
}

func (controller *UsageExample) Get(key string) (types.Url, error) {
	var preUrl string
	if err := controller.pool.Do(radix.Cmd(&preUrl, "GET", "url "+key)); err != nil {
		return types.Url{}, err
	}
	if preUrl == "" {
		return types.Url{}, kernelErrors.NotFoundError
	}

	var urlData types.Url
	err := json.Unmarshal([]byte(preUrl), &urlData)
	if err != nil {
		return types.Url{}, nil
	}
	urlData.Key = key

	return urlData, nil
}

func (controller *UsageExample) postSimple(newUrl types.Url) (types.Url, error) {
	if strings.HasPrefix(newUrl.Key, controller.Kernel.AutogeneratedPrefix) {
		return types.Url{}, kernelErrors.UsingAutogeneratedKeyPrefix
	}

	jsonData, _ := json.Marshal(newUrl)
	err := controller.redis.SetIfNotExists("url "+newUrl.Key, jsonData)
	if err != nil {
		return types.Url{}, err
	}

	data2, err := controller.redis.Get(newUrl.Key)
	if err != nil {
		return types.Url{}, err
	}

	if bytes.Compare(jsonData, data2) != 0 {
		return types.Url{}, kernelErrors.AlreadyExistsError
	}

	return newUrl, nil
}

func (controller *UsageExample) postAutogenerated(newUrl types.Url) (types.Url, error) {
	newUrl.Key = ""
	newUrlJsonData, _ := json.Marshal(newUrl)
	newUrlJsonString := string(newUrlJsonData)

	added := false
	for !added {
		potentialKey, err := controller.GetPotentialKey(newUrl.Url)
		if err == kernelErrors.NotFoundError { // key is free

			newUrl.Key, err = controller.GetNewUniqueKey()

			err = controller.pool.Do(radix.Cmd(nil, "SET", "autogen "+newUrlJsonString, newUrl.Key, "NX"))
			if err != nil {
				return types.Url{}, nil
			}

			jsonData, _ := json.Marshal(newUrl)
			err = controller.pool.Do(radix.Cmd(&p, "SET", "url "+newUrl.Key, string(jsonData), "NX"))
			// todo inspect
			if errors.Is(err, kernelErrors.ValueAlreadyExistsError) {
				added = false
			} else if err != nil {
				return types.Url{}, err
			} else {
				added = true
			}

		} else if err == nil { // key is found
			potentialUrl, err := controller.Get(potentialKey)
			if err == kernelErrors.NotFoundError {

			} else if err != nil {
				return types.Url{}, err
			} else if potentialUrl.Url == newUrl.Url {
				newUrl = potentialUrl
				added = true
			}
		} else {
			return types.Url{}, err
		}

		time.Sleep(time.Second)
	}
}

func (controller *UsageExample) Post(newUrl types.Url) (types.Url, error) {
	var p string
	if newUrl.Autogenerated {
		added := false
		for !added {
			potentialKey, err := controller.GetPotentialKey(newUrl.Url)
			if err != nil && !errors.Is(err, kernelErrors.NotFoundError) {
				return types.Url{}, err
			}

			if err == nil { // key is found
				potentialUrl, err := controller.Get(potentialKey)
				if err == kernelErrors.NotFoundError {

				} else if err != nil {
					return types.Url{}, err
				} else if potentialUrl.Url == newUrl.Url {
					newUrl = potentialUrl
					added = true
				}
			} else { // key is free
				newUrl.Key, err = controller.GetNewUniqueKey()

				jsonData, _ := json.Marshal(newUrl)
				err = controller.pool.Do(radix.Cmd(&p, "SET", "url "+newUrl.Key, string(jsonData), "NX"))
				// todo inspect
				if errors.Is(err, kernelErrors.ValueAlreadyExistsError) {
					added = false
				} else if err != nil {
					return types.Url{}, err
				} else {
					added = true
				}

				err = controller.pool.Do(radix.Cmd(nil, "SET", "autogen "+newUrl.Url, newUrl.Key))
				if err != nil {
					return types.Url{}, nil
				}
			}
			time.Sleep(time.Second)
		}
	} else {
		jsonData, _ := json.Marshal(newUrl)
		err := controller.pool.Do(radix.Cmd(&p, "SET", "url "+newUrl.Key, string(jsonData), "NX"))
		if err != nil {
			return types.Url{}, err
		}
		if u, _ := controller.Get(newUrl.Key); u != newUrl {
			return types.Url{}, kernelErrors.AlreadyExistsError
		}
	}

	return newUrl, controller.pool.Do(radix.Cmd(nil, "SAVE"))
}

func (controller *UsageExample) Patch(patchUrl types.Url) error {
	jsonData, _ := json.Marshal(patchUrl)
	if patchUrl.Autogenerated {
		p := radix.Pipeline(
			radix.Cmd(nil, "SET", "url "+patchUrl.Key, string(jsonData)),
			radix.Cmd(nil, "SET", "autogen "+patchUrl.Url, patchUrl.Key),
		)

		if err := controller.pool.Do(p); err != nil {
			panic(err)
		}
	} else {
		err := controller.pool.Do(
			radix.Cmd(nil, "SET", "url "+patchUrl.Key, string(jsonData)))
		if err != nil {
			return err
		}
	}

	return controller.pool.Do(radix.Cmd(nil, "SAVE"))
}

func (controller *UsageExample) Delete(key string) error {
	url_, err := controller.Get(key)
	if err != nil {
		return err
	}

	jsonData, _ := json.Marshal(url_)
	if url_.Autogenerated {
		p := radix.Pipeline(
			radix.Cmd(nil, "DEL", "url "+url_.Key, string(jsonData)),
			radix.Cmd(nil, "DEL", "autogen "+url_.Url, url_.Key),
		)

		if err := controller.pool.Do(p); err != nil {
			return err
		}
	} else {
		err := controller.pool.Do(
			radix.Cmd(nil, "DEL", "url "+url_.Key, string(jsonData)))
		if err != nil {
			return err
		}
	}
	return controller.pool.Do(radix.Cmd(nil, "SAVE"))
}

func (controller *UsageExample) GetPotentialKey(key string) (string, error) {
	data, err := controller.redis.Get(key)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (controller *UsageExample) GetNewUniqueKey() (string, error) {
	counter, err := controller.redis.GetNewUniqueNumber()
	return utils.NumberToLexString(counter), err
}

func (controller *UsageExample) GenericKeySupport() bool {
	return true
}

func (controller *UsageExample) GetName() string {
	return controller.name
}

func (controller *UsageExample) GetType() string {
	return "Database.Redis"
}
