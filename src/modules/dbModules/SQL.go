package dbModules

//
//import (
//	"database/sql"
//	"errors"
//	"fmt"
//	"github.com/mediocregopher/radix/v3"
//	"goshort/kernel"
//	"goshort/kernel/utils"
//	"goshort/types"
//	kernelErrors "goshort/types/errors"
//	"time"
//)
//
//type SQL struct {
//	types.ModuleBase
//	db       *sql.DB
//	Driver   string
//	Ip       string
//	Port     int
//	Username string
//	Password string
//	Database string
//	TableName string
//	Name     string
//	Kernel   *kernel.Kernel
//}
//
//func CreateSQL(kernel *kernel.Kernel) types.UrlControllerInterface {
//	return &SQL{Kernel: kernel}
//}
//
//func (controller *SQL) Init(config map[string]interface{}) error {
//	if err := controller.ModuleBase.Init(config); err != nil {
//		return err
//	}
//
//	controller.Driver = utils.UnwrapFieldOrDefault( config, "driver", "mysql").(string)
//	controller.Ip = utils.UnwrapFieldOrDefault( config, "ip", "127.0.0.1").(string)
//	controller.Port = utils.UnwrapFieldOrDefault( config, "port", 3306).(int)
//	controller.Username = utils.UnwrapFieldOrDefault( config, "username", "user").(string)
//	controller.Password = utils.UnwrapFieldOrDefault( config, "password", "password").(string)
//	controller.Database = utils.UnwrapFieldOrDefault( config, "database", "goshort").(string)
//	controller.TableName = utils.UnwrapFieldOrDefault( config, "table_name", "url").(string)
//	return nil
//}
//
//func (controller *SQL) Run() error {
//	var err error
//	dataSourceName := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s", controller.Username, controller.Password,
//		controller.Ip, controller.Port, controller.Database)
//	controller.db, err = sql.Open(controller.Driver, dataSourceName)
//	return err
//}
//
//func (controller *SQL) Get(key string) (url types.Url, err error) {
//	var rows *sql.Rows
//	rows, err = controller.db.Query("select key, url, code, autogenerated from ? where key = ?", controller.TableName, key)
//	if err != nil {
//		return
//	}
//	defer rows.Close()
//	rows.Next()
//	err = rows.Scan(&url.Key, &url.Url, &url.Code, &url.Autogenerated)
//	return
//}
//
//func (controller *SQL) Post(newUrl types.Url) (types.Url, error) {
//	stmt, err := db.Prepare("INSERT INTO users(name) VALUES(?)")
//	if err != nil {
//		log.Fatal(err)
//	}
//	res, err := stmt.Exec("Dolly")
//	if err != nil {
//		log.Fatal(err)
//	}
//	var p string
//	if newUrl.Autogenerated {
//		added := false
//		for !added {
//			potentialKey, err := controller.GetPotentialKey(newUrl.Url)
//			if err != nil && !errors.Is(err, kernelErrors.NotFoundError) {
//				return types.Url{}, err
//			}
//
//			if err == nil { // key is found
//				potentialUrl, err := controller.Get(potentialKey)
//				if err != nil && !errors.Is(err, kernelErrors.NotFoundError) {
//					return types.Url{}, err
//				}
//				if potentialUrl.Url == newUrl.Url {
//					newUrl = potentialUrl
//					added = true
//				}
//			} else { // key is free
//				newUrl.Key, err = controller.GetNewUniqueKey()
//
//				err = controller.pool.Do(radix.Cmd(&p, "SET", "url "+newUrl.Key, newUrl.ToString(), "NX"))
//				// todo inspect
//				if errors.Is(err, kernelErrors.ValueAlreadyExistsError) {
//					added = false
//				} else if err != nil {
//					return types.Url{}, err
//				} else {
//					added = true
//				}
//
//				err = controller.pool.Do(radix.Cmd(nil, "SET", "autogen "+newUrl.Url, newUrl.Key))
//				if err != nil {
//					return types.Url{}, nil
//				}
//			}
//			time.Sleep(time.Second)
//		}
//	} else {
//		err := controller.pool.Do(radix.Cmd(&p, "SET", "url "+newUrl.Key, newUrl.ToString(), "NX"))
//		if err != nil {
//			return types.Url{}, err
//		}
//	}
//
//	return newUrl, controller.pool.Do(radix.Cmd(nil, "SAVE"))
//}
//
//func (controller *SQL) Patch(patchUrl types.Url) error {
//	if patchUrl.Autogenerated {
//		p := radix.Pipeline(
//			radix.Cmd(nil, "SET", "url "+patchUrl.Key, patchUrl.ToString()),
//			radix.Cmd(nil, "SET", "autogen "+patchUrl.Url, patchUrl.Key),
//		)
//
//		if err := controller.pool.Do(p); err != nil {
//			panic(err)
//		}
//	} else {
//		err := controller.pool.Do(
//			radix.Cmd(nil, "SET", "url "+patchUrl.Key, patchUrl.ToString()))
//		if err != nil {
//			return err
//		}
//	}
//
//	return controller.pool.Do(radix.Cmd(nil, "SAVE"))
//}
//
//func (controller *SQL) Delete(url_ types.Url) error {
//	if url_.Autogenerated {
//		p := radix.Pipeline(
//			radix.Cmd(nil, "DEL", "url "+url_.Key, url_.ToString()),
//			radix.Cmd(nil, "DEL", "autogen "+url_.Url, url_.Key),
//		)
//
//		if err := controller.pool.Do(p); err != nil {
//			return err
//		}
//	} else {
//		err := controller.pool.Do(
//			radix.Cmd(nil, "DEL", "url "+url_.Key, url_.ToString()))
//		if err != nil {
//			return err
//		}
//	}
//	return controller.pool.Do(radix.Cmd(nil, "SAVE"))
//}
//
//func (controller *SQL) GetPotentialKey(key string) (string, error) {
//	var preUrl string
//	err := controller.pool.Do(radix.Cmd(&preUrl, "GET", "url "+key))
//	if err != nil {
//		return "", err
//	} else if preUrl == "" {
//		return "", kernelErrors.NotFoundError
//	}
//
//	return preUrl, nil
//}
//
//func (controller *SQL) GetNewUniqueKey() (string, error) {
//	var counter int
//	err := controller.pool.Do(radix.Cmd(&counter, "INCR", "counter"))
//	return utils.NumberToLexString(counter), err
//}
//
//func (controller *SQL) GenericKeySupport() bool {
//	return true
//}
//
//func (controller *SQL) GetName() string {
//	return controller.name
//}
//
//func (controller *SQL) GetType() string {
//	return "Redis"
//}
//
//func (controller *SQL) TryReconnect() error {
//	// TODO: realize
//	return nil
//}
