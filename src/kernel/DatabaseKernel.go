package kernel

import (
	"goshort/src/types"
	errors2 "goshort/src/types/errors"
	"sync"
)

type DatabaseKernel struct {
	types.ModuleBase

	Database types.DatabaseInterface
	Kernel   *Kernel
}

func (databaseKernel *DatabaseKernel) Init(config map[string]interface{}) error {
	for k, v := range config {
		creator, ok := databaseKernel.Kernel.DatabaseCreators[k]
		if !ok {
			continue
		} else {
			databaseKernel.Database = creator(databaseKernel.Kernel)
			_ = databaseKernel.Database.Init(v.(map[string]interface{}))
			break
		}
	}
	return nil
}

func (databaseKernel *DatabaseKernel) Run(wg *sync.WaitGroup) error {
	if err := databaseKernel.Database.Run(wg); err != nil {
		_ = databaseKernel.Kernel.Logger.SendError(err)
		databaseKernel.Kernel.ErrorManage(err, databaseKernel.Database)
	}

	databaseKernel.Kernel.SetModuleRunState(databaseKernel)
	return nil
}

func (databaseKernel *DatabaseKernel) Stop() error {
	if err := databaseKernel.Database.Stop(); err != nil {
		_ = databaseKernel.Kernel.Logger.SendError(err)
		databaseKernel.Kernel.ErrorManage(err, databaseKernel.Database)
	}

	databaseKernel.Kernel.SetModuleStopState(databaseKernel)
	return nil
}

func (databaseKernel *DatabaseKernel) Get(key string) (types.Url, error) {
	return databaseKernel.Database.Get(key)
}

func (databaseKernel *DatabaseKernel) Post(newUrl types.Url) (types.Url, error) {
	if newUrl.Code == 0 {
		newUrl.Code = 301
	}
	if newUrl.Key == "" {
		newUrl.Autogenerated = true
	}

	err := databaseKernel.Kernel.Middleware.Exec(&newUrl)
	if err != nil {
		return newUrl, err
	}

	if newUrl.Autogenerated && !databaseKernel.Database.GenericKeySupport() {
		return newUrl, errors2.GenericKeysAreNotSupported
	}

	return databaseKernel.Database.Post(newUrl)
}

func (databaseKernel *DatabaseKernel) Patch(patchUrl types.Url) error {
	return databaseKernel.Database.Patch(patchUrl)
}

func (databaseKernel *DatabaseKernel) Delete(key string) error {
	return databaseKernel.Database.Delete(key)
}

func (databaseKernel *DatabaseKernel) GenericKeySupport() bool {
	return databaseKernel.Database.GenericKeySupport()
}

func (databaseKernel *DatabaseKernel) GetName() string {
	return "Kernel.Database"
}

func (databaseKernel *DatabaseKernel) GetType() string {
	return "Kernel.Database"
}
